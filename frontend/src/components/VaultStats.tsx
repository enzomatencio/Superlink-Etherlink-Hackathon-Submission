import { useReadContract } from 'wagmi'
import { formatUnits } from 'viem'
import { VAULT_ADDRESS, USDC_ADDRESS, USDT_ADDRESS } from '../config/web3'
import { vaultABI } from '../config/abi'

const VaultStats = () => {
  // Read vault data
  const { data: totalAssets } = useReadContract({
    address: VAULT_ADDRESS,
    abi: vaultABI,
    functionName: 'totalAssets',
    query: { refetchInterval: 10000 } // Refetch every 10 seconds
  })

  const { data: tvlCap } = useReadContract({
    address: VAULT_ADDRESS,
    abi: vaultABI,
    functionName: 'tvlCap',
  })

  const { data: paused } = useReadContract({
    address: VAULT_ADDRESS,
    abi: vaultABI,
    functionName: 'paused',
    query: { refetchInterval: 10000 }
  })

  const { data: canRebalanceData } = useReadContract({
    address: VAULT_ADDRESS,
    abi: vaultABI,
    functionName: 'canRebalance',
    query: { refetchInterval: 30000 } // Refetch every 30 seconds
  })

  const { data: currentAllocation } = useReadContract({
    address: VAULT_ADDRESS,
    abi: vaultABI,
    functionName: 'currentAllocation',
    query: { refetchInterval: 10000 }
  })

  const { data: totalPrincipal } = useReadContract({
    address: VAULT_ADDRESS,
    abi: vaultABI,
    functionName: 'totalPrincipal',
    query: { refetchInterval: 10000 }
  })

  // Format values
  const tvl = totalAssets ? formatUnits(totalAssets, 6) : '0'
  const maxTvl = tvlCap ? formatUnits(tvlCap, 6) : '0'
  const utilization = totalAssets && tvlCap ? 
    ((Number(totalAssets) / Number(tvlCap)) * 100).toFixed(1) : '0'

  // Parse APY data - the contract returns APY values in basis points (1/100 of a percent)
  // canRebalanceData[3] and [4] are already in correct precision, just need to divide by 100
  const currentAPYRaw = canRebalanceData?.[3] ? Number(canRebalanceData[3]) / 100 : 0
  const betterAPYRaw = canRebalanceData?.[4] ? Number(canRebalanceData[4]) / 100 : 0
  
  // Apply 15% performance fee (users get 85% of the yield)
  const currentAPY = (currentAPYRaw * 0.85).toFixed(2)
  const betterAPY = (betterAPYRaw * 0.85).toFixed(2)

  // Calculate total yield generated by the vault
  const totalYieldGenerated = totalAssets && totalPrincipal ? 
    (Number(formatUnits(totalAssets, 6)) - Number(formatUnits(totalPrincipal, 6))).toFixed(6) : '0'

  // Determine current asset
  const currentAsset = currentAllocation === USDC_ADDRESS ? 'USDC' : 
                      currentAllocation === USDT_ADDRESS ? 'USDT' : 'Unknown'

  return (
    <div className="vault-stats">
      <h2>üìä Vault Statistics</h2>
      
      <div className="stats-grid-inner">
        <div className="stat-card">
          <h3>Total Value Locked</h3>
          <div className="value">${Number(tvl).toLocaleString()}</div>
          <div className="subtext">
            {utilization}% of ${Number(maxTvl).toLocaleString()} cap
          </div>
        </div>

        <div className="stat-card">
          <h3>Current APY (Net)</h3>
          <div className="value">{currentAPY}%</div>
          <div className="subtext">
            After 15% performance fee
          </div>
        </div>

        <div className="stat-card">
          <h3>Status</h3>
          <div className={`status ${paused ? 'paused' : 'active'}`}>
            {paused ? '‚è∏Ô∏è Paused' : '‚úÖ Active'}
          </div>
          <div className="subtext">
            {canRebalanceData?.[0] ? 'üîÑ Rebalance Available' : `üìä Optimized on ${currentAsset}`}
          </div>
        </div>

        <div className="stat-card">
          <h3>Total Yield Generated</h3>
          <div className="value">
            ${Number(totalYieldGenerated).toLocaleString()}
          </div>
          <div className="subtext">
            Lifetime vault earnings
          </div>
        </div>
      </div>

      <div className="vault-info">
        <div className="info-item">
          <span className="label">Contract:</span>
          <span className="value">
            <a 
              href={`https://explorer.etherlink.com/address/${VAULT_ADDRESS}`}
              target="_blank" 
              rel="noopener noreferrer"
              className="contract-link"
            >
              {VAULT_ADDRESS.slice(0, 6)}...{VAULT_ADDRESS.slice(-4)}
            </a>
          </span>
        </div>
        <div className="info-item">
          <span className="label">Network:</span>
          <span className="value">Etherlink Mainnet</span>
        </div>
        <div className="info-item">
          <span className="label">Optimization:</span>
          <span className="value">
            {canRebalanceData?.[0] ? `${betterAPY}% Net APY Available` : 'Currently Optimized'}
          </span>
        </div>
      </div>
    </div>
  )
}

export default VaultStats